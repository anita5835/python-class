# -*- coding: utf-8 -*-
"""practice class

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q_9hmP71h7gg11lb2ztAzdUHwj8XwKeF
"""

class p:
  def __init__(self,name,age):
    self.name=name
    self.age=age
  def greet(self):
   return f'my name is {self.name} and my age is {self.age}'

obj=p("anita",21)
print(obj.greet())

class dog:
  def __init__(self,bark):
    self.bark=bark
  def a(self):
    return f'dog usually do {self.bark}'

obj=dog("boo")
print(obj.a())

class dog:
  def __init__(self,name,age):
    self.name=name
    self.age=age
  def bark(self):
    return "woof!"

  def describe(self):
    return f'{self.name} is {self.age}'


ob=dog("a",2)
print(ob.describe())

# Create a class Car with attributes make, model, and year. Implement a method that prints the car's
# description.
class car:
  def __init__(self,make,model,year):
    self.make=make
    self.model=model
    self.year=year
  def method(self):
    return f'{self.make},{self.model},{self.year}'

obj=car(2021,"w3",2014)
print(obj.method())

# Define a class Rectangle with attributes width and height. Add methods to calculate and return the
# area and perimeter of the rectangle.
class rectangle:
  def __init__(self,width,height):
    self.width=width
    self.height=height
  def area(self):
    return self.width*self.height
  def perimeter(self):
    return 2*(self.width+self.height)
obj=rectangle(2,3)
print(obj.area())
print(obj.perimeter())

# Create a class Person with attributes name and age. Add a method celebrate_birthday that increases
# the age by 1.
class Person:
  def __init__(self,name,age):
    self.name=name
    self.age=age
  def celebrate_birthday(self):
    return self.age+1
obj=Person("anita",21)
print(obj.celebrate_birthday())

# Implement a class BankAccount with methods to deposit, withdraw, and check the balance. Ensure
# that the balance cannot go below zero.
class BankAccount:
    def __init__(self, initial_balance=0):
        self.balance = initial_balance

    def deposit(self, amount):
        if amount > 0:
            self.balance += amount
            print(f"Deposited: {amount:.2f}. New balance: {self.balance:.2f}")
        else:
            print("Deposit amount must be positive.")

    def withdraw(self, amount):
        if amount <= 0:
            print("Withdrawal amount must be positive.")
        elif amount > self.balance:
            print(f"Insufficient funds.{self.balance:.2f}.")
        else:
            self.balance -= amount
            print(f"Withdrew: {amount:.2f}. New balance: {self.balance:.2f}")

    def get_balance(self):
        return self.balance

account = BankAccount(100)
account.deposit(50)
account.withdraw(30)
account.withdraw(150)
print(f"{account.get_balance():.2f}"

# Define a class Circle with an attribute radius. Add a method to calculate the circumference and area
# of the circle.
class circle:
  def __init__(self,radius):
    self.radius=radius
  def circumference(self):
    return 2*3.14*self.radius
  def area(self):
    return 3.14*self.radius**2

obj=circle(2)
print(obj.circumference())
print(obj.area())

# Create a class Animal with a method make_sound. Derive two subclasses, Dog and Cat, each with a
# specific sound implemented.
class animal:
  def __init__(self,make_sound):